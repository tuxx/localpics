name: Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build_step.outputs.build_success }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.0'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make zip

      - name: Extract build metadata
        id: meta
        run: |
          # Remove the 'v' prefix from version for cleaner version string
          VERSION=${GITHUB_REF##*/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and Package
        id: build_step
        run: |
          # Explicitly echo the version info to verify it's being set correctly
          echo "Building version: $VERSION, commit: $COMMIT, date: $DATE"
          
          # Use the environment variables directly in the build commands
          make release-all VERSION="$VERSION" COMMIT="$COMMIT" DATE="$DATE"
          make package
          
          echo "build_success=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Check if build succeeded
        if: steps.build_step.outputs.build_success != 'true'
        run: exit 1

      - name: Upload build artifacts
        if: steps.build_step.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: localpics-artifacts
          path: build/release/
          retention-days: 1
          
      - name: Upload Linux AMD64 binary for Docker
        if: steps.build_step.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: localpics-linux-amd64
          path: build/localpics-linux-amd64
          retention-days: 1

  docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: localpics-linux-amd64
          path: build/

      - name: Make binary executable
        run: chmod +x build/localpics-linux-amd64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/tags/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Generate Docker image link
        id: docker_link
        run: |
          DOCKER_LINK="[Docker Image](https://github.com/${{ github.repository }}/pkgs/container/$(echo ${{ github.repository }} | cut -d '/' -f 2))"
          echo "DOCKER_LINK=${DOCKER_LINK}" >> $GITHUB_ENV

  release:
    needs: [build, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: localpics-artifacts
          path: build/release/

      - name: Get commit message for release notes
        id: get_release_notes
        run: |
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo -e "\n\n## Docker Image\nA Docker image for this release is available at: ghcr.io/${{ github.repository }}:${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT
          echo -e "\nOr pull latest with: \`docker pull ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.get_release_notes.outputs.release_notes }}
          files: |
            build/release/*.tar.gz
            build/release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
