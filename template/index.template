<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Media Viewer</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/exif-js/2.3.0/exif.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    body { margin: 0; font-family: sans-serif; background: #fafafa; }
    .nav { background: #333; color: white; padding: 1rem; position: sticky; top: 0; display: flex; gap: 1rem; flex-wrap: wrap; z-index: 100; }
    .nav a { color: white; text-decoration: none; cursor: pointer; padding: 5px 10px; border-radius: 4px; }
    .nav a.active { background: #555; }
    .nav a:hover { background: #444; }
    .intro { padding: 1rem; font-size: 1rem; background: #fff; box-shadow: 0 1px 4px rgba(0,0,0,0.05); }
    .file-table { border-collapse: collapse; margin-top: 1rem; width: 100%; }
    .file-table th, .file-table td { border: 1px solid #ccc; padding: 6px 10px; text-align: left; }
    .file-table th { background: #f0f0f0; }
    
    /* Dynamic column layout based on media type */
    .container { column-gap: 1rem; padding: 1rem; }
    .container.grid-4 { column-count: 4; }
    .container.grid-2 { column-count: 2; }
    
    .file-card { break-inside: avoid; background: white; margin-bottom: 1rem; padding: 0.5rem; border-radius: 6px; box-shadow: 0 1px 4px rgba(0,0,0,0.1); }
    .file-card img, .file-card video { width: 100%; border-radius: 4px; }
    .file-card audio { width: 100%; margin: 10px 0; }
    .file-card iframe { width: 100%; height: 300px; border: none; }
    
    /* Taller cards for text/code content */
    .file-card pre { 
      background: #f0f0f0; 
      padding: 0.5rem; 
      border-radius: 4px; 
      overflow: auto; 
      max-height: 400px;
      min-height: 200px;
    }
    .file-card .text-preview, .file-card .code-preview {
      min-height: 200px;
      max-height: 400px;
      overflow: auto;
    }
    
    .file-card .name { font-weight: bold; margin-top: 0.5rem; word-break: break-word; }
    .file-card .info { font-size: 0.85rem; color: #666; margin-top: 0.3rem; }
    .file-card .view-full, .file-card .download { display: inline-block; margin-top: 0.5rem; font-size: 0.85rem; text-decoration: underline; color: #0077cc; cursor: pointer; margin-right: 1rem; }
    
    .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); justify-content: center; align-items: center; z-index: 1000; flex-direction: row; padding: 2rem; box-sizing: border-box; }
    .modal img { max-width: 60vw; max-height: 90vh; }
    .modal-content { width: 80%; height: 90%; background: white; border-radius: 8px; display: flex; flex-direction: column; }
    .modal-header { padding: 1rem; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
    .modal-body { flex: 1; overflow: auto; padding: 1rem; }
    .modal-body pre { margin: 0; height: 100%; overflow: auto; }
    .modal-body .markdown-content { padding: 0 1rem; }
    
    .modal-details { background: white; color: black; width: 300px; margin-left: 1rem; padding: 1rem; border-radius: 6px; display: none; font-size: 0.9rem; max-height: 90vh; overflow-y: auto; }
    .top-button {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 10px 15px;
      font-size: 14px;
      background-color: #333;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      z-index: 1001;
    }
    .modal-actions {
      position: absolute;
      top: 10px;
      right: 10px;
    }
    .modal-actions button {
      margin: 0 5px;
      padding: 5px 10px;
      background: #333;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .modal-actions button:hover {
      background: #444;
    }
    .modal-nav {
      position: absolute;
      top: 50%;
      width: 100%;
      display: flex;
      justify-content: space-between;
      pointer-events: none;
    }
    .modal-nav span {
      pointer-events: all;
      background: rgba(0,0,0,0.5);
      color: white;
      font-size: 2rem;
      padding: 0.5rem 1rem;
      cursor: pointer;
      user-select: none;
    }
    .modal-nav span.disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }
    .spinner {
      display: inline-block;
      width: 50px;
      height: 50px;
      border: 5px solid rgba(0,0,0,0.1);
      border-radius: 50%;
      border-top-color: #333;
      animation: spin 1s ease-in-out infinite;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
    }
    .error-container {
      background: #ffdddd;
      border-left: 5px solid #f44336;
      padding: 1rem;
      margin: 1rem;
      border-radius: 4px;
    }
    .download-button {
      display: inline-flex;
      align-items: center;
      padding: 6px 12px;
      background: #f0f0f0;
      border: 1px solid #ddd;
      border-radius: 4px;
      text-decoration: none;
      color: #333;
      font-size: 0.9rem;
      margin-top: 0.5rem;
    }
    .download-button:hover {
      background: #e0e0e0;
    }
    .file-icon {
      width: 48px;
      height: 48px;
      margin: 0 auto 1rem auto;
      background: #f0f0f0;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
    }
  </style>
</head>
<body>
  <div class="nav" id="navbar">
    <a onclick="showIntro()" class="active" data-category="home">üè† Home</a>
    <a onclick="load('image')" data-category="image">Images</a>
    <a onclick="load('video')" data-category="video">Videos</a>
    <a onclick="load('audio')" data-category="audio">Audio</a>
    <a onclick="load('text')" data-category="text">Text Docs</a>
    <a onclick="load('code')" data-category="code">Code Files</a>
    <a onclick="load('pdf')" data-category="pdf">PDFs</a>
    <a onclick="load('archive')" data-category="archive">Archives</a>
    <a onclick="load('other')" data-category="other">Other</a>
    <span style="float: right;margin-right: 12px;font-size: 0.8em;opacity: 0.5;pointer-events: none;">
        v{{.Version}}
    </span>
  </div>

  <div class="intro" id="intro">
    <h2>üìÅ Media Viewer</h2>
    <p>Welcome! Click a category above to explore your files. Scroll down to load more. Click on an image to view full-size and see metadata like resolution, EXIF, and download options.</p>
    <div id="fileStats"></div>
  </div>

  <div class="container" id="container"></div>

  <!-- Image Modal -->
  <div class="modal" id="imageModal" onclick="hideModal('imageModal', event)">
    <div class="modal-nav" id="imageModalNav">
      <span onclick="navigateModal(-1)" id="prevButton">&lt;</span>
      <span onclick="navigateModal(1)" id="nextButton">&gt;</span>
    </div>
    <img id="modalImg" src="" alt="preview">
    <div class="modal-actions">
      <button onclick="event.stopPropagation(); toggleExif();">View Image Details</button>
      <a id="imageDownloadBtn" href="#" download style="text-decoration:none;">
        <button onclick="event.stopPropagation();">Download</button>
      </a>
    </div>
    <div class="modal-details" id="modalDetails"></div>
  </div>

  <!-- Text/Code Modal -->
  <div class="modal" id="fileModal" onclick="hideModal('fileModal', event)">
    <div class="modal-content" onclick="event.stopPropagation()">
      <div class="modal-header">
        <h3 id="fileModalTitle">File Preview</h3>
        <a id="fileDownloadBtn" href="#" download class="download-button">Download</a>
      </div>
      <div class="modal-body" id="fileModalBody">
        <!-- Content will be inserted here -->
      </div>
    </div>
  </div>

  <button class="top-button" onclick="scrollToTop()">Back to Top</button>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<script>
    let data = [];
    let index = 0;
    let step = 50;
    let type = '';
    let modalIndex = -1;
    let detailsVisible = false;
    let loadingMore = false;
    let allFileStats = {};
    let endReached = false;

    // Fetch all stats on page load
    window.addEventListener('DOMContentLoaded', function() {
      fetchAllStats();
    });

    // Close modals with Escape key
    window.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        document.getElementById('imageModal').style.display = 'none';
        document.getElementById('fileModal').style.display = 'none';
      }
      
      if (document.getElementById('imageModal').style.display === 'flex') {
        if (e.key === 'ArrowRight') navigateModal(1);
        else if (e.key === 'ArrowLeft') navigateModal(-1);
      }
    });

    // Infinite scroll
    window.onscroll = function() {
      if (loadingMore || endReached) return;
      
      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
        loadingMore = true;
        render().then(() => {
          loadingMore = false;
        });
      }
    };

    // Fetch statistics for all file types
    async function fetchAllStats() {
      const types = ['image', 'video', 'audio', 'text', 'code', 'pdf', 'archive', 'other'];
      const statsContainer = document.getElementById('fileStats');
      statsContainer.innerHTML = '<div class="loading-container"><div class="spinner"></div><p>Loading file statistics...</p></div>';
      
      try {
        const results = await Promise.allSettled(types.map(async t => {
          try {
            const response = await fetch(t + '.json');
            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
            const json = await response.json();
            return { type: t, count: json.length };
          } catch (error) {
            console.warn(`Could not fetch stats for ${t}:`, error);
            return { type: t, count: 0, error: true };
          }
        }));
        
        allFileStats = results.reduce((acc, result) => {
          if (result.status === 'fulfilled') {
            acc[result.value.type] = result.value;
          }
          return acc;
        }, {});
        
        displayFileStats();
      } catch (error) {
        statsContainer.innerHTML = `<div class="error-container">Failed to load file statistics: ${error.message}</div>`;
      }
    }

    // Display file statistics in a table
    function displayFileStats() {
      const types = Object.keys(allFileStats);
      if (types.length === 0) {
        document.getElementById('fileStats').innerHTML = '<p>No file statistics available.</p>';
        return;
      }
      
      const totalCount = Object.values(allFileStats).reduce((sum, stat) => sum + (stat.count || 0), 0);
      
      let html = `
        <h3>File Statistics</h3>
        <table class="file-table">
          <thead>
            <tr>
              <th>Type</th>
              <th>Count</th>
              <th>Percentage</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      types.forEach(type => {
        const stat = allFileStats[type];
        if (!stat.error) {
          const percentage = totalCount > 0 ? ((stat.count / totalCount) * 100).toFixed(1) : 0;
          html += `
            <tr>
              <td>${type.charAt(0).toUpperCase() + type.slice(1)}</td>
              <td>${stat.count}</td>
              <td>${percentage}%</td>
            </tr>
          `;
        }
      });
      
      html += `
          </tbody>
          <tfoot>
            <tr>
              <td><strong>Total</strong></td>
              <td><strong>${totalCount}</strong></td>
              <td>100%</td>
            </tr>
          </tfoot>
        </table>
      `;
      
      document.getElementById('fileStats').innerHTML = html;
    }

    // Show home view
    function showIntro() {
      updateActiveNav('home');
      document.getElementById('intro').style.display = 'block';
      document.getElementById('container').innerHTML = '';
    }

    // Update active navigation item
    function updateActiveNav(category) {
      document.querySelectorAll('#navbar a').forEach(a => {
        a.classList.remove('active');
        if (a.dataset.category === category) {
          a.classList.add('active');
        }
      });
    }

    // Load a category
    async function load(t) {
      type = t;
      index = 0;
      data = [];
      endReached = false;
      updateActiveNav(t);
      document.getElementById('intro').style.display = 'none';
      
      const container = document.getElementById('container');
      container.innerHTML = '<div class="loading-container"><div class="spinner"></div><p>Loading files...</p></div>';
      
      // Set the appropriate grid layout based on file type
      container.className = 'container';
      if (t === 'text' || t === 'code' || t === 'pdf') {
        container.classList.add('grid-2');
      } else {
        container.classList.add('grid-4');
      }
      
      try {
        const response = await fetch(t + '.json');
        if (!response.ok) throw new Error(`HTTP error ${response.status}`);
        data = await response.json();
        container.innerHTML = '';
        await render();
      } catch (error) {
        container.innerHTML = `<div class="error-container">
          <h3>Error Loading Files</h3>
          <p>${error.message}</p>
          <button onclick="load('${t}')">Try Again</button>
        </div>`;
      }
    }

    // Render files
    async function render() {
      if (data.length === 0 || index >= data.length) {
        endReached = true;
        return;
      }
      
      const container = document.getElementById('container');
      const slice = data.slice(index, index + step);
      
      for (let i = 0; i < slice.length; i++) {
        const file = slice[i];
        const div = document.createElement('div');
        div.className = 'file-card';
        
        // Add file name and date/size info
        div.innerHTML = `
          <div class="name">${file.name}</div>
          <div class="info">
            Size: ${formatFileSize(file.size)} ‚Ä¢ 
            Modified: ${new Date(file.modified).toLocaleString()}
          </div>
        `;
        
        // Render different file types
        if (file.type === 'image') {
          div.innerHTML += `<img src="${file.path}" onclick="showImageModal(${index + i})" loading="lazy">`;
        } 
        else if (file.type === 'video') {
          div.innerHTML += `<video controls src="${file.path}" preload="metadata"></video>`;
        } 
        else if (file.type === 'audio') {
          div.innerHTML += `<audio controls src="${file.path}" preload="metadata"></audio>`;
        } 
        else if (file.type === 'pdf') {
          div.innerHTML += `<iframe src="${file.path}" title="${file.name}"></iframe>`;
        } 
        else if (file.type === 'code' || file.type === 'text') {
          // Add preview icon
          div.innerHTML += `<div class="file-icon">${getFileIcon(file.extension)}</div>`;
          
          // Add preview/download buttons
          const actions = document.createElement('div');
          
          const viewLink = document.createElement('a');
          viewLink.className = 'view-full';
          viewLink.innerText = 'View Full File';
          viewLink.onclick = function() { showFileModal(file); };
          actions.appendChild(viewLink);
          
          const downloadLink = document.createElement('a');
          downloadLink.className = 'download';
          downloadLink.href = file.path;
          downloadLink.download = file.name;
          downloadLink.innerText = 'Download';
          actions.appendChild(downloadLink);
          
          div.appendChild(actions);
          
          // For code and text files, load a preview
          await renderTextPreview(file, div);
        }
        else {
          // Archive and other files
          div.innerHTML += `<div class="file-icon">${getFileIcon(file.extension)}</div>`;
          const downloadLink = document.createElement('a');
          downloadLink.className = 'download-button';
          downloadLink.href = file.path;
          downloadLink.download = file.name;
          downloadLink.innerHTML = 'üì• Download File';
          div.appendChild(downloadLink);
        }
        
        container.appendChild(div);
      }
      
      index += step;
      return true;
    }

    // Get icon for file type
    function getFileIcon(extension) {
      const iconMap = {
        'pdf': 'üìÑ',
        'zip': 'üóúÔ∏è',
        'rar': 'üóúÔ∏è',
        '7z': 'üóúÔ∏è',
        'gz': 'üóúÔ∏è',
        'tgz': 'üóúÔ∏è',
        'py': 'üêç',
        'js': 'üìú',
        'html': 'üåê',
        'css': 'üé®',
        'go': 'üêπ',
        'java': '‚òï',
        'c': 'üîß',
        'cpp': 'üîß',
        'rs': 'ü¶Ä',
        'txt': 'üìù',
        'md': 'üìù'
      };
      
      return iconMap[extension] || 'üìÑ';
    }

    // Render text preview with syntax highlighting
    async function renderTextPreview(file, div) {
      try {
        const response = await fetch(file.path);
        if (!response.ok) throw new Error(`HTTP error ${response.status}`);
        const text = await response.text();
        
        // Limit preview to 30 lines or 3000 characters (increased for better preview)
        const contentPreview = text.split('\n').slice(0, 30).join('\n').substring(0, 3000);
        const hasMore = text.length > contentPreview.length;
        
        const previewDiv = document.createElement('div');
        
        if (file.extension === 'md') {
          // Markdown preview
          previewDiv.className = 'text-preview';
          previewDiv.innerHTML = marked.parse(contentPreview);
          if (hasMore) previewDiv.innerHTML += '<p><em>... (content truncated)</em></p>';
        } else {
          // Code preview with syntax highlighting
          const pre = document.createElement('pre');
          pre.className = 'code-preview';
          const code = document.createElement('code');
          
          // Map file extensions to Prism language classes
          const langMap = {
            'js': 'javascript',
            'py': 'python',
            'rb': 'ruby',
            'go': 'go',
            'java': 'java',
            'c': 'c',
            'cpp': 'cpp',
            'cs': 'csharp',
            'php': 'php',
            'html': 'html',
            'css': 'css',
            'sh': 'bash',
            'rs': 'rust',
            'ts': 'typescript',
            'json': 'json',
            'xml': 'xml',
            'yaml': 'yaml',
            'yml': 'yaml',
            'sql': 'sql',
            'md': 'markdown',
            'swift': 'swift',
            'kt': 'kotlin',
            'dart': 'dart',
            'lua': 'lua',
            'r': 'r'
          };
          
          const language = langMap[file.extension] || 'text';
          code.className = `language-${language}`;
          code.textContent = contentPreview;
          
          if (hasMore) {
            const more = document.createElement('div');
            more.style.textAlign = 'center';
            more.style.padding = '5px';
            more.style.color = '#666';
            more.innerText = '... (content truncated)';
            pre.appendChild(code);
            pre.appendChild(more);
          } else {
            pre.appendChild(code);
          }
          
          previewDiv.appendChild(pre);
          
          // Apply syntax highlighting
          if (Prism) {
            Prism.highlightElement(code);
          }
        }
        
        div.appendChild(previewDiv);
      } catch (error) {
        console.error('Error loading file preview:', error);
        const errorMsg = document.createElement('div');
        errorMsg.className = 'error-container';
        errorMsg.innerText = `Failed to load preview: ${error.message}`;
        div.appendChild(errorMsg);
      }
    }

    // Format file size
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Show file modal for text/code files
    async function showFileModal(file) {
      const modal = document.getElementById('fileModal');
      const modalTitle = document.getElementById('fileModalTitle');
      const modalBody = document.getElementById('fileModalBody');
      const downloadBtn = document.getElementById('fileDownloadBtn');
      
      modalTitle.textContent = file.name;
      downloadBtn.href = file.path;
      downloadBtn.download = file.name;
      
      // Show loading indicator
      modalBody.innerHTML = '<div class="loading-container"><div class="spinner"></div><p>Loading file...</p></div>';
      modal.style.display = 'flex';
      
      try {
        const response = await fetch(file.path);
        if (!response.ok) throw new Error(`HTTP error ${response.status}`);
        const text = await response.text();
        
        if (file.extension === 'md') {
          // Render markdown
          const contentDiv = document.createElement('div');
          contentDiv.className = 'markdown-content';
          contentDiv.innerHTML = marked.parse(text);
          modalBody.innerHTML = '';
          modalBody.appendChild(contentDiv);
        } else {
          // Render code with syntax highlighting
          const pre = document.createElement('pre');
          const code = document.createElement('code');
          
          // Map file extensions to Prism language classes
          const langMap = {
            'js': 'javascript',
            'py': 'python',
            'rb': 'ruby',
            'go': 'go',
            'java': 'java',
            'c': 'c',
            'cpp': 'cpp',
            'cs': 'csharp',
            'php': 'php',
            'html': 'html',
            'css': 'css',
            'sh': 'bash',
            'rs': 'rust',
            'ts': 'typescript',
            'json': 'json',
            'xml': 'xml',
            'yaml': 'yaml',
            'yml': 'yaml',
            'sql': 'sql',
            'md': 'markdown',
            'swift': 'swift',
            'kt': 'kotlin',
            'dart': 'dart',
            'lua': 'lua',
            'r': 'r'
          };
          
          const language = langMap[file.extension] || 'text';
          code.className = `language-${language}`;
          code.textContent = text;
          
          pre.appendChild(code);
          modalBody.innerHTML = '';
          modalBody.appendChild(pre);
          
          // Apply syntax highlighting
          if (Prism) {
            Prism.highlightElement(code);
          }
        }
      } catch (error) {
        console.error('Error loading file:', error);
        modalBody.innerHTML = `<div class="error-container">
          <h3>Error Loading File</h3>
          <p>${error.message}</p>
        </div>`;
      }
    }
// Show image modal
    function showImageModal(i) {
      modalIndex = i;
      const file = data[i];
      const modal = document.getElementById('imageModal');
      const modalImg = document.getElementById('modalImg');
      const prevButton = document.getElementById('prevButton');
      const nextButton = document.getElementById('nextButton');
      
      // Update navigation buttons
      prevButton.classList.toggle('disabled', i <= 0);
      nextButton.classList.toggle('disabled', i >= data.length - 1);
      
      // Set image and download link
      modalImg.src = file.path;
      document.getElementById('imageDownloadBtn').href = file.path;
      modal.style.display = 'flex';
      
      // Reset EXIF panel
      if (detailsVisible) {
        toggleExif(true);
      } else {
        document.getElementById('modalDetails').style.display = 'none';
      }
    }

    // Navigate between images in modal
    function navigateModal(dir) {
      if (modalIndex < 0) return;
      
      const newIndex = modalIndex + dir;
      
      // Check bounds
      if (newIndex < 0 || newIndex >= data.length) {
        return; // Do nothing if out of bounds
      }
      
      // Only navigate to images
      if (data[newIndex].type === 'image') {
        showImageModal(newIndex);
      } else {
        // Look for next image in the direction we're going
        for (let i = newIndex; dir > 0 ? i < data.length : i >= 0; i += dir) {
          if (data[i].type === 'image') {
            showImageModal(i);
            break;
          }
        }
      }
    }

    // Toggle EXIF data panel
    function toggleExif(forceUpdate = false) {
      const details = document.getElementById('modalDetails');
      
      if (!forceUpdate) {
        detailsVisible = !detailsVisible;
      }
      
      if (!detailsVisible) {
        details.style.display = 'none';
        return;
      }
      
      // Show loading state
      details.style.display = 'block';
      details.innerHTML = '<div class="loading-container"><div class="spinner"></div><p>Loading image data...</p></div>';
      
      const img = document.getElementById('modalImg');
      
      // Basic image info
      const info = [`<strong>Resolution:</strong> ${img.naturalWidth} √ó ${img.naturalHeight}`];
      info.push(`<strong>File:</strong> ${data[modalIndex].name}`);
      info.push(`<strong>Size:</strong> ${formatFileSize(data[modalIndex].size)}`);
      
      // Try to get EXIF data
      try {
        EXIF.getData(img, function() {
          try {
            const exif = EXIF.getAllTags(this);
            
            if (exif && Object.keys(exif).length > 0) {
              info.push('<h4>EXIF Metadata</h4>');
              
              // Format date taken if available
              if (exif.DateTimeOriginal) {
                const dateParts = exif.DateTimeOriginal.split(' ');
                const date = dateParts[0].replace(/:/g, '-');
                const time = dateParts[1];
                info.push(`<strong>Date Taken:</strong> ${date} ${time}`);
              }
              
              // Camera info
              if (exif.Make || exif.Model) {
                const make = exif.Make || '';
                const model = exif.Model || '';
                info.push(`<strong>Camera:</strong> ${make} ${model}`.trim());
              }
              
              // Exposure info
              if (exif.ExposureTime) {
                const exposureTime = exif.ExposureTime < 1 ? 
                  `1/${Math.round(1/exif.ExposureTime)}` : 
                  exif.ExposureTime;
                info.push(`<strong>Exposure:</strong> ${exposureTime} sec`);
              }
              
              if (exif.FNumber) {
                info.push(`<strong>Aperture:</strong> f/${exif.FNumber}`);
              }
              
              if (exif.ISO) {
                info.push(`<strong>ISO:</strong> ${exif.ISO}`);
              }
              
              if (exif.FocalLength) {
                info.push(`<strong>Focal Length:</strong> ${exif.FocalLength}mm`);
              }
              
              // GPS coordinates if available
              if (exif.GPSLatitude && exif.GPSLongitude) {
                try {
                  const lat = EXIF.getTag(this, "GPSLatitude");
                  const lon = EXIF.getTag(this, "GPSLongitude");
                  const latRef = EXIF.getTag(this, "GPSLatitudeRef") || "N";
                  const lonRef = EXIF.getTag(this, "GPSLongitudeRef") || "W";
                  
                  if (lat && lon) {
                    const latDecimal = (lat[0] + lat[1]/60 + lat[2]/3600) * (latRef === "N" ? 1 : -1);
                    const lonDecimal = (lon[0] + lon[1]/60 + lon[2]/3600) * (lonRef === "E" ? 1 : -1);
                    
                    info.push(`<strong>GPS:</strong> ${latDecimal.toFixed(6)}, ${lonDecimal.toFixed(6)}`);
                    info.push(`<a href="https://maps.google.com/?q=${latDecimal.toFixed(6)},${lonDecimal.toFixed(6)}" target="_blank">View on Map</a>`);
                  }
                } catch (e) {
                  console.warn('Error processing GPS data:', e);
                }
              }
              
              // Add all other EXIF tags in a table
              info.push('<details><summary>All EXIF Data</summary><table>');
              for (const tag in exif) {
                // Skip binary data
                if (typeof exif[tag] === 'object' && exif[tag].length > 20) continue;
                
                let value = exif[tag];
                // Format value if it's an array
                if (Array.isArray(value)) {
                  value = value.join(', ');
                }
                info.push(`<tr><td><strong>${tag}</strong></td><td>${value}</td></tr>`);
              }
              info.push('</table></details>');
            } else {
              info.push('<p>No EXIF metadata found in this image.</p>');
            }
            
            details.innerHTML = info.join('<br>');
          } catch (error) {
            console.error('Error processing EXIF data:', error);
            details.innerHTML = info.join('<br>') + '<p>Error processing EXIF data</p>';
          }
        });
      } catch (error) {
        console.error('Error reading EXIF data:', error);
        details.innerHTML = info.join('<br>') + '<p>Error reading EXIF data</p>';
      }
    }

    // Hide modal
    function hideModal(modalId, event) {
      if (event.target.id === modalId || event.target.classList.contains('modal')) {
        document.getElementById(modalId).style.display = 'none';
      }
    }

    // Scroll to top
    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  </script>
</body>
</html>
